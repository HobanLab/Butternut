(38000/52)/37.5
((38000/52)/37.5)*1.24
(((38000/52)/37.5)*1.24)*4
library(hierfstat)
hierfstat
?hierfstat
setwd("C:\\Users\\eschumacher\\Documents")
nanodrop_values <- read.csv("nandrop_shz_17_60.csv")
setwd("C:\\Users\\eschumacher\\Documents")
setwd("C:/Users/eschumacher/Documents")
setwd("C:\\Users\\eschumacher\\Documents\\primer_ordering_ZAIN")
setwd("C:\\Users\\eschumacher\\Documents")
read.csv("nanodrop_shz_17_60.csv")
nanodrop_values <- read.csv("nanodrop_shz_17_60.csv")
##set my working directory to my documents folder
setwd("C:\\Users\\eschumacher\\Documents")
##
nanodrop_values <- read.csv("nanodrop_shz_17_60.csv")
?t.test
t.test(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, paired = TRUE)
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop)
##now we run the t-test
t.test(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, paired = TRUE)
##
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop)
##
pdf("badblank_nanodrop.pdf")
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop)
dev.off()
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, ylim = c(-10, 10))
##
pdf("badblank_nanodrop.pdf")
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, ylim = c(-10, 10),
names = c("Before New Blank", "After New Blank"))
##
pdf("badblank_nanodrop.pdf")
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, ylim = c(-10, 10),
names = c("Before New Blank", "After New Blank"))
dev.off()
##
pdf("badblank_nanodrop.pdf")
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, ylim = c(-10, 10),
names = c("Before New Blank", "After New Blank"), title = "260/230 ratio comparisons before and after new blank")
dev.off()
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, ylim = c(-10, 10),
names = c("Before New Blank", "After New Blank"), ylab = c("260/230 Ratios"),
main = c("260/230 ratios before and after new blank"))
##
pdf("badblank_nanodrop.pdf")
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, ylim = c(-10, 10),
names = c("Before New Blank", "After New Blank"), ylab = c("260/230 Ratios"),
main = c("260/230 ratios before and after new blank"))
dev.off()
##
pdf("badblank_nanodrop.pdf")
boxplot(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, ylim = c(-10, 10),
names = c("Before New Blank", "After New Blank"), ylab = c("260/230 Ratios"),
main = c("260/230 ratios before and after new blank"))
dev.off()
##set my working directory to my documents folder
setwd("C:\\Users\\eschumacher\\Documents")
##load in nanodrop values
nanodrop_values <- read.csv("nanodrop_shz_17_60.csv")
##non-parametrc
wilcox.test(nanodrop_values$Old.Nanodrop, nanodrop_values$New.Nanodrop, paired = TRUE, alternative = "two.sided")
sum(134
83.8
48.2
21.2)
sum(134, 83.8, 48.2, 21.2)
library(adegenet)
library(poppr)
library(hierfstat)
library(PopGenReport)
library(pegas)
?pair.ia
library(adegenet)
##
QUAC_div <- read.genepop("C:\\Users\\eschumacher\\Documents\\GitHub\\QUAC_diversity\\QUAC_data_files\\QUAC_genind\\garden_wild\\QUAC_garden_clean.gen", ncode = 3)
QUAC_div
QUAC_div@tab
QUAC_div@loc.fac
QUAC_div
QUAC_div@loc.n.all
summary(QUAC_div)
library(hierfstat)
allelic.richness(QUAC_div)
sum(as.numeric(QUAC_div@loc.n.all))
as.numeric(QUAC_div@loc.n.all)[1]
21/175
length(QUAC_div@loc.n.all)
allelic.richness(QUAC_div)
colMeans(allelic.richness(QUAC_div)$Ar)
library(geosphere)
geosphere
?geosphere
sessionInfo()
library(adegenet)
sessionInfo()
library(poppr)
sessionInfo()
library(hierfstat)
sessionInfo()
library(PopGenReport)
sessionInfo()
library(Demerelate)
sessionInfo()
install.packages("BChron")
install.packages("Bchron")
library(Bchron)
sessionInfo()
library(diveRsity)
library(adegenet)
library(poppr)
library(Demerelate)
#########################
#   Load Data Files     #
#########################
#set working directory to load in data files
setwd("../../QUAC_data_files")
##now read in genepop file as a genind for adegenet
QUAC_gen <- read.genepop("QUAC_adegenet_files/QUAC_allpop.gen", ncode = 3)
##load relatedness data frame for relatedness analysis
QUAC_df <- read.csv("QUAC_data_frames/QUAC_allpop.csv")
##rename individuals in the genind object
rownames(QUAC_gen@tab) <- QUAC_df$Ind
##create population name list and rename the populations in the genind object
QUAC_popnames <- unique(QUAC_df$Pop)
levels(QUAC_gen@pop) <- QUAC_popnames
##now read in genepop file as a genind for adegenet
QUAC_gen <- read.genepop("QUAC_adegenet_files/QUAC_allpop.gen", ncode = 3)
email_tests  <-  c('email', 'Email', 'e Mail', 'e mail', 'E-mail',
'e-mail', 'eMail', 'E-Mail', 'EMAIL')
library(tidyverse)
pattern <- "\\[\\(i?)email\\]\\"
str_detect(email_tests, pattern)
pattern <- "\\(i?)email\\"
str_detect(email_tests, pattern)
pattern <- "\\[(i?)email]\\"
str_detect(email_tests, pattern)
pattern <- "\[(i?)email]\"
pattern <- "\[\(i?)email\]\"
pattern <- "\\[\\(i?)email\\]\\"
str_detect(email_tests, pattern)
str_detect(email_tests, "\w+\")
str_detect(email_tests, "\[w+\]")
str_detect(email_tests, "\\[\\w+\\]")
str_detect(email_tests, "\\[\\email\\]")
str_detect(email_tests, "\email\")
str_detect(email_tests, "\[email\]")
str_detect(email_tests, "\[(\e)\]")
str_detect(email_tests, "\[(\w+)\]")
is.character(email_tests)
str_match(email_tests, "\[(\w+)\]")
str_match(email_tests, "\\[(\w+)\\]")
str_match(email_tests, "\\[(\\w+)\\]")
str_detect(email_tests, "\\[(\\w+)\\]")
str_detect(email_tests, "\\[(\\e)\\]")
str_detect(email_tests, "\\[(\\w+)\\]")
str_detect(email_tests, "\\[(i?)(\\w+)\\]")
str_detect(email_tests, "\\[(i?)(\\e)\\]")
str_detect(email_tests, "^e")
str_detect(email_tests, "(?)i^e")
str_detect(email_tests, "(?i)^e")
str_detect(email_tests, "(?i)^e\\")
str_detect(email_tests, "(?i)^e\\[\\(?i)mail]\\")
str_detect(email_tests, "(?i)^e\\[\\w+]\\")
str_detect(email_tests, "(?i)^e")
str_detect(email_tests, "(?i)^e\\[\\mail\\]\\")
str_detect(email_tests, "(?i)^e\[\mail\]\")
str_detect(email_tests, "(?i)^e[\mail\]\")
str_detect(email_tests, "(?i)^e\[mail\]\")
str_detect(email_tests, "(?i)^e\[mail\]")
str_detect(email_tests, "(?i)^e\\[mail\\]")
str_detect(email_tests, "(?i)^e\\[(?i)mail\\]")
str_detect(email_tests, "(?i)^e\\\s[(?i)mail\\]")
str_detect(email_tests, "(?i)^e\\\s\[(?i)mail\\]")
str_detect(email_tests, "(?i)^e\\s\[(?i)mail\\]")
str_detect(email_tests, "(?i)^e\s\[(?i)mail\\]")
str_detect(email_tests, "(?i)^e\[(?i)mail\\]")
str_detect(email_tests, "(?i)^e\\s\[(?i)mail\\]")
str_detect(email_tests, "(?i)^e\\[(?i)mail\\]")
str_detect(email_tests, "(?i)^e\\[[Mm]ail\\]")
str_detect(email_tests, "(?i)^e\\.\\[[Mm]ail\\]")
str_detect(email_tests, "(?i)^e\\[[Mm]ail\\]")
str_detect(email_tests, "(?i)^e\\.\\[Mm]ail\\")
str_detect(email_tests, "(?i)^e\\.[Mm]ail\\")
str_detect(email_tests, "(?i)^e.[Mm]ail\\")
str_detect(email_tests, "(?i)^e.\\[Mm]ail")
str_detect(email_tests, "(?i)^e.[Mm]ail")
str_detect(email_tests, "(?i)^e.(?i)mail")
str_detect(email_tests, "(?i)^e.\\(?i)mail")
str_detect(email_tests, "(?i)^e\\.(?i)mail")
str_detect(email_tests, "(?i)^e.(?i)mail")
str_detect(email_tests, "(?i)^e.\[(\^e)\](?i)mail")
str_detect(email_tests, "(?i)^e.\[(\^e)\]\(?i)mail")
pattern <- pattern <- "(?i)e[\\-\\s]?mail"
pattern <- "(?i)e[\\-\\s]?mail"
str_detect(email_tests, pattern)
as.numeric("74%")
str_detect(percent_string, "[$\\%\\]")
percent_string <- "74%"
pattern <- "\\$%\\"
str_detect(percent_string, pattern)
library(sp)
sessionInfo
sessionInfo()
library(adegenet)
library(diveRsity)
library(poppr)
library(hierfstat)
library(tidyr)
#######################
#     Load files      #
#######################
#set working directory to load in data files
setwd("../../Data_Files")
#genind objects
sp_genind_list <- list.files(path = "Adegenet_Files/Garden_Wild", pattern = "_clean.gen")
#df files
sp_df_list <- list.files(path = "Data_Frames", pattern = "_clean_df.csv")
#list out allele categories
list_sp_allele_cat<-c("global","glob_v_com","glob_com","glob_lowfr","glob_rare","reg_rare","loc_com_d1","loc_com_d2","loc_rare")
#list of scenarios
species_list <- c("QUAC_wK", "QUAC_woK", "ZAIN_og", "ZAIN_rebinned")
#load in function to calculate allele frequency categories
source("../Analyses/RScripts/Fa_sample_funcs.R")
install.packages("hiphop")
library(hiphop)
###############################
#     Parentage Analysis      #
###############################
#create genotype file
genotype <- c("AA", "Aa", "aa")
#hiphop table
gentable_name <- c("offspring","dam","sire","hot.dam","hot.sire","hot.parents", "hiphop","hothiphop.parents")
#hiphop table
gentable_names <- c("offspring","dam","sire","hot.dam","hot.sire","hot.parents", "hiphop","hothiphop.parents")
#fill in table
gentable <- as.data.frame(array(NA,dim = c(length(genotype)^3,length(gentable_names)), dimnames=list(NULL,gentable_names)))
View(gentable)
#add genotypes
gentable$offspring<-rep(genotype, each=length(genotype)*length(genotype))
View(gentable)
gentable$dam<-rep(genotype, length(genotype)*length(genotype))
gentable$dam<-rep(genotype, length(genotype)*length(genotype))
gentable$sire<-rep(genotype, length(genotype), each=length(genotype))
#test for HOT - Homozygous Opposite Test
gentable$hot.dam<-ifelse((gentable$offspring=="AA" & gentable$dam=="aa") | (gentable$offspring=="aa" & gentable$dam=="AA"), 1,0)
gentable$hot.parents<-ifelse(((gentable$offspring=="AA" & (gentable$sire=="aa" | gentable$dam=="aa")) | (gentable$offspring=="aa" & (gentable$sire=="AA" | gentable$dam=="AA"))),1,0)
#test for HOT - Homozygous Opposite Test
#mother and child pair
gentable$hot.dam<-ifelse((gentable$offspring=="AA" & gentable$dam=="aa") | (gentable$offspring=="aa" & gentable$dam=="AA"), 1,0)
# the HOT test for the offspring-sire dyad
gentable$hot.sire<-ifelse( (gentable$offspring=="AA" & gentable$sire=="aa") | (gentable$offspring=="aa" & gentable$sire=="AA"), 1,0)
# the HOT test for the offspring-dam-sire triad
gentable$hot.parents<-ifelse(((gentable$offspring=="AA" & (gentable$sire=="aa" | gentable$dam=="aa")) | (gentable$offspring=="aa" & (gentable$sire=="AA" | gentable$dam=="AA"))),1,0)
# the hiphop for the dam-sire combination
gentable$hiphop<-ifelse( (gentable$offspring=="Aa" & gentable$sire=="aa" & gentable$dam=="aa") | (gentable$offspring=="Aa" & gentable$sire=="AA" &  gentable$dam=="AA"), 1,0)
gentable$hothiphop.parents<-gentable$hot.parents+gentable$hiphop
print(gentable)
individuals
head(individuals)
head(genotype)
head(genotypes)
genotypes
genotypes[1:5,1:13]
##working through trial dataset
ind2018 <- subset(individuals, individuals$year==2018)
inspection <- inspect(ind=ind2018, gen=genotypes)
head(inspection)
head(inspection)
inspection[which(inspection$sampled==0),]
print(c(length(unique(ind2018$individual[which(ind2018$type=="offspring")])), length(unique(ind2018$individual[which(ind2018$type=="adult female")])), length(unique(ind2018$individual[which(ind2018$type=="adult male")]))))
combinations<-hothiphop(ind=ind2018, gen=genotypes)
inspect
hothiphop
#to find the best match
best_hothiphop<-topmatch(x=combinations, ranking="hothiphop.parents")
best_hothiphop[1:8,]
install.packages("PolyPatEx")
library(PolyPatEx)
# Create data frame
example <- data.frame(indiv = c("A", "B", "C", "D", "E"),
height_0 = c(15, 10, 12, 9, 17),
height_10 = c(20, 18, 14, 15, 19),
height_20 = c(23, 24, 18, 17, 26))
# View the data frame
head(example)
# Calculating the mean for each row in the data frame
row.avg <- apply(X = example[, 2:4], MARGIN = 1, FUN = mean)
# View row.avg
row.avg
# Calculating the mean for each column in the data frame
col.avg <- apply(example[, 2:4], 2, mean)
# View col.avg
col.avg
mean(15,20,23)
mean(10,18,24)
mean(12, 14, 18)
mean(12,14,18)
mean(example[,2:4])
mean(example[1,2:4])
example[,2:4]
example[2,2:4]
mean(as.numeric(example[2,2:4]))
# Set seed so that the randomly-generated numbers are the same each time
set.seed(123)
# Create a list using randomly-generated numbers
plants <- list(height = runif(10, min = 10, max = 20),
mass = runif(10, min = 5, max = 10),
flowers = sample(1:10, 10))
# View the list
plants
lapply(plants, mean)
# Use sapply to find the mean of each list element
sapply(plants, mean)
# Load library to use the pivot_longer() function
library(tidyverse)
# Pivot the data so that the data are in long format instead of wide format
example <- pivot_longer(example, cols = 2:4, names_to = "time", values_to = "height")
# Use sub() to get rid of the string "height_" in front of the time values
example$time <- sub("height_", "", example$time)
# View data
head(example)
tapply(X = vector.to.analyze, INDEX = vector.to.group.by, FUN = function.you.want)
# Use tapply() to find average height by time grouping
tapply(X = example$height, INDEX = example$time, mean)
library(adegenet)
library(hierfstat)
?Hs
library(adegenet)
setwd("C:/Users/eschumacher/Documents/GitHub/Butternut/Genetic_Analyses/data_files/after_reorg")
butternutgen
butternutgen <- read.genepop("butternut_24pop_nomd.gen", ncode = 3)
levels(butternutgen@pop)
table(butternutgen@pop)
