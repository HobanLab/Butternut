###Start sampling code
##determine alleles captured by sampling
alleles_cap <- colSums(temp_genind@tab[rows_to_samp,], na.rm = T)
}
#calculating the total alleles
total_alleles = ncol(temp_genind@tab)
#saving the proportion of alleles captured -> alleles sampled/total alleles
#represents genetic conservation success
all_quercus_results[i,k,j] = sample_n_alleles/total_alleles
#saving the total alleles present across the populations for each species, and each replicate
total_alleles_all_quercus[i,k,j] = total_alleles
#Fourth object: # of individuals per population
#  allele_cat_tot <- get.allele.cat(Spp_tot_genpop, c(1:5), 2, n_ind)
##calculate the total number of alleles in each frequency category over 9 allele categories
# for (a in 1:length(allele_cat_tot)) all_existing_by_sp_reps[j,a,i] <- sum((allele_cat_tot[[a]])>0,na.rm=T)
} else {
}
}
}
}
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
for(i in 1:length(species_list)) {
setwd(paste(my_dir,species_list[i],sep=""))
list_files = list.files(paste(my_dir,species_list[i],sep=""), pattern = ".gen$")
for(j in 1:length(list_files)) {
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[j]], ncode=3)
#calculating Fst
if(boolean_fst == TRUE) {
##creating genind list for QUAC genind
temp_genind_list[[j]] <- temp_genind
##convert genind files to hierfstat format to run pwfst
temp_hierfstat[[j]] <- genind2hierfstat(temp_genind_list[[j]])
##array to store all pwfst values
pwfst <- pairwise.neifst(temp_hierfstat[[j]])
##calculate statistics for QUAC - max, min, mean fst
mean_max_min_fst[1,j,i] <- mean(pwfst, na.rm = TRUE)
mean_max_min_fst[2,j,i] <- min(pwfst, na.rm = TRUE)
mean_max_min_fst[3,j,i] <- max(pwfst, na.rm = TRUE)
}
#defining the first and last individuals of the entire population, so we know where to sample between
first_ind = 1
last_ind = sum(table(temp_genind@pop))
#for each replicate, sample up to 500 individuals, starting with 1
for(k in 1:max_sample_size) {
#this is a check to make sure that k, the sample size, doesn't exceed the species total pop. size
#the loop will break if k is greater than the total pop. size
#in other words, sampling stops once the entire population has been sampled, or when 500 samples is reached
if(k <= sum(table(temp_genind@pop))) {
#choosing which rows of the matrix to sample from
#rows indicate individuals
rows_to_samp = sample(first_ind:last_ind, k)
#saving the alleles sampled
if(k == 1) {
sample_n_alleles = sum(temp_genind@tab[rows_to_samp,]>0)
} else {
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
}
}
#First, calculate number of individuals per population
n_ind <- table(temp_genind@pop)
##Then create a genpop file for temp_genind
Spp_tot_genpop <- genind2genpop(temp_genind)
##separate by population
Spp_tot_genind_sep <- seppop(temp_genind)
###Start sampling code
##determine alleles captured by sampling
alleles_cap <- colSums(temp_genind@tab[rows_to_samp,], na.rm = T)
#calculating the total alleles
# total_alleles = ncol(temp_genind@tab)
#saving the proportion of alleles captured -> alleles sampled/total alleles
#represents genetic conservation success
#  all_quercus_results[i,k,j] = sample_n_alleles/total_alleles
#
#saving the total alleles present across the populations for each species, and each replicate
#  total_alleles_all_quercus[i,k,j] = total_alleles
#Fourth object: # of individuals per population
#  allele_cat_tot <- get.allele.cat(Spp_tot_genpop, c(1:5), 2, n_ind)
##calculate the total number of alleles in each frequency category over 9 allele categories
# for (a in 1:length(allele_cat_tot)) all_existing_by_sp_reps[j,a,i] <- sum((allele_cat_tot[[a]])>0,na.rm=T)
} else {
}
}
}
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
for(i in 1:length(species_list)) {
setwd(paste(my_dir,species_list[i],sep=""))
list_files = list.files(paste(my_dir,species_list[i],sep=""), pattern = ".gen$")
for(j in 1:length(list_files)) {
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[j]], ncode=3)
#calculating Fst
if(boolean_fst == TRUE) {
##creating genind list for QUAC genind
temp_genind_list[[j]] <- temp_genind
##convert genind files to hierfstat format to run pwfst
temp_hierfstat[[j]] <- genind2hierfstat(temp_genind_list[[j]])
##array to store all pwfst values
pwfst <- pairwise.neifst(temp_hierfstat[[j]])
##calculate statistics for QUAC - max, min, mean fst
mean_max_min_fst[1,j,i] <- mean(pwfst, na.rm = TRUE)
mean_max_min_fst[2,j,i] <- min(pwfst, na.rm = TRUE)
mean_max_min_fst[3,j,i] <- max(pwfst, na.rm = TRUE)
}
#defining the first and last individuals of the entire population, so we know where to sample between
first_ind = 1
last_ind = sum(table(temp_genind@pop))
#for each replicate, sample up to 500 individuals, starting with 1
for(k in 1:max_sample_size) {
#this is a check to make sure that k, the sample size, doesn't exceed the species total pop. size
#the loop will break if k is greater than the total pop. size
#in other words, sampling stops once the entire population has been sampled, or when 500 samples is reached
if(k <= sum(table(temp_genind@pop))) {
#choosing which rows of the matrix to sample from
#rows indicate individuals
rows_to_samp = sample(first_ind:last_ind, k)
#saving the alleles sampled
if(k == 1) {
sample_n_alleles = sum(temp_genind@tab[rows_to_samp,]>0)
} else {
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
}
}
#First, calculate number of individuals per population
n_ind <- table(temp_genind@pop)
##Then create a genpop file for temp_genind
Spp_tot_genpop <- genind2genpop(temp_genind)
##separate by population
Spp_tot_genind_sep <- seppop(temp_genind)
###Start sampling code
##determine alleles captured by sampling
alleles_cap <- colSums(temp_genind@tab[rows_to_samp,], na.rm = T)
} else {
#calculating the total alleles
# total_alleles = ncol(temp_genind@tab)
#saving the proportion of alleles captured -> alleles sampled/total alleles
#represents genetic conservation success
#  all_quercus_results[i,k,j] = sample_n_alleles/total_alleles
#
#saving the total alleles present across the populations for each species, and each replicate
#  total_alleles_all_quercus[i,k,j] = total_alleles
#Fourth object: # of individuals per population
#  allele_cat_tot <- get.allele.cat(Spp_tot_genpop, c(1:5), 2, n_ind)
##calculate the total number of alleles in each frequency category over 9 allele categories
# for (a in 1:length(allele_cat_tot)) all_existing_by_sp_reps[j,a,i] <- sum((allele_cat_tot[[a]])>0,na.rm=T)
}
}
}
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
for(i in 1:length(species_list)) {
}
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
for(i in 1:length(species_list)) {
setwd(paste(my_dir,species_list[i],sep=""))
list_files = list.files(paste(my_dir,species_list[i],sep=""), pattern = ".gen$")
for(j in 1:length(list_files)) {
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[j]], ncode=3)
#calculating Fst
if(boolean_fst == TRUE) {
##creating genind list for QUAC genind
temp_genind_list[[j]] <- temp_genind
##convert genind files to hierfstat format to run pwfst
temp_hierfstat[[j]] <- genind2hierfstat(temp_genind_list[[j]])
##array to store all pwfst values
pwfst <- pairwise.neifst(temp_hierfstat[[j]])
##calculate statistics for QUAC - max, min, mean fst
mean_max_min_fst[1,j,i] <- mean(pwfst, na.rm = TRUE)
mean_max_min_fst[2,j,i] <- min(pwfst, na.rm = TRUE)
mean_max_min_fst[3,j,i] <- max(pwfst, na.rm = TRUE)
}
#defining the first and last individuals of the entire population, so we know where to sample between
first_ind = 1
last_ind = sum(table(temp_genind@pop))
#for each replicate, sample up to 500 individuals, starting with 1
for(k in 1:max_sample_size) {
#this is a check to make sure that k, the sample size, doesn't exceed the species total pop. size
#the loop will break if k is greater than the total pop. size
#in other words, sampling stops once the entire population has been sampled, or when 500 samples is reached
if(k <= sum(table(temp_genind@pop))) {
#choosing which rows of the matrix to sample from
#rows indicate individuals
rows_to_samp = sample(first_ind:last_ind, k)
#saving the alleles sampled
if(k == 1) {
sample_n_alleles = sum(temp_genind@tab[rows_to_samp,]>0)
} else {
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
} else {
#calculating the total alleles
total_alleles = ncol(temp_genind@tab)
#First, calculate number of individuals per population
n_ind <- table(temp_genind@pop)
##Then create a genpop file for temp_genind
Spp_tot_genpop <- genind2genpop(temp_genind)
##separate by population
Spp_tot_genind_sep <- seppop(temp_genind)
###Start sampling code
##determine alleles captured by sampling
alleles_cap <- colSums(temp_genind@tab[rows_to_samp,], na.rm = T)
#saving the proportion of alleles captured -> alleles sampled/total alleles
#represents genetic conservation success
#  all_quercus_results[i,k,j] = sample_n_alleles/total_alleles
#
#saving the total alleles present across the populations for each species, and each replicate
#  total_alleles_all_quercus[i,k,j] = total_alleles
#Fourth object: # of individuals per population
#  allele_cat_tot <- get.allele.cat(Spp_tot_genpop, c(1:5), 2, n_ind)
##calculate the total number of alleles in each frequency category over 9 allele categories
# for (a in 1:length(allele_cat_tot)) all_existing_by_sp_reps[j,a,i] <- sum((allele_cat_tot[[a]])>0,na.rm=T)
}
}
}
}
}
#saving the alleles sampled
if(k == 1) {
sample_n_alleles = sum(temp_genind@tab[rows_to_samp,]>0)
} else {
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
} else {
#calculating the total alleles
total_alleles = ncol(temp_genind@tab)
#First, calculate number of individuals per population
n_ind <- table(temp_genind@pop)
##Then create a genpop file for temp_genind
Spp_tot_genpop <- genind2genpop(temp_genind)
##separate by population
Spp_tot_genind_sep <- seppop(temp_genind)
###Start sampling code
##determine alleles captured by sampling
alleles_cap <- colSums(temp_genind@tab[rows_to_samp,], na.rm = T)
#saving the proportion of alleles captured -> alleles sampled/total alleles
#represents genetic conservation success
#  all_quercus_results[i,k,j] = sample_n_alleles/total_alleles
#
#saving the total alleles present across the populations for each species, and each replicate
#  total_alleles_all_quercus[i,k,j] = total_alleles
#Fourth object: # of individuals per population
#  allele_cat_tot <- get.allele.cat(Spp_tot_genpop, c(1:5), 2, n_ind)
##calculate the total number of alleles in each frequency category over 9 allele categories
# for (a in 1:length(allele_cat_tot)) all_existing_by_sp_reps[j,a,i] <- sum((allele_cat_tot[[a]])>0,na.rm=T)
}
#Loop to simulate sampling
#First, create a list of all genepop files (all replicates) to loop over
#the variable 'i' represents each replicate
for(i in 1:length(species_list)) {
setwd(paste(my_dir,species_list[i],sep=""))
list_files = list.files(paste(my_dir,species_list[i],sep=""), pattern = ".gen$")
for(j in 1:length(list_files)) {
#creating a temporary genind object (using Adegenet package) for each simulation replicate
temp_genind = read.genepop(list_files[[j]], ncode=3)
#calculating Fst
if(boolean_fst == TRUE) {
##creating genind list for QUAC genind
temp_genind_list[[j]] <- temp_genind
##convert genind files to hierfstat format to run pwfst
temp_hierfstat[[j]] <- genind2hierfstat(temp_genind_list[[j]])
##array to store all pwfst values
pwfst <- pairwise.neifst(temp_hierfstat[[j]])
##calculate statistics for QUAC - max, min, mean fst
mean_max_min_fst[1,j,i] <- mean(pwfst, na.rm = TRUE)
mean_max_min_fst[2,j,i] <- min(pwfst, na.rm = TRUE)
mean_max_min_fst[3,j,i] <- max(pwfst, na.rm = TRUE)
}
#defining the first and last individuals of the entire population, so we know where to sample between
first_ind = 1
last_ind = sum(table(temp_genind@pop))
#for each replicate, sample up to 500 individuals, starting with 1
for(k in 1:max_sample_size) {
#this is a check to make sure that k, the sample size, doesn't exceed the species total pop. size
#the loop will break if k is greater than the total pop. size
#in other words, sampling stops once the entire population has been sampled, or when 500 samples is reached
if(k <= sum(table(temp_genind@pop))) {
#choosing which rows of the matrix to sample from
#rows indicate individuals
rows_to_samp = sample(first_ind:last_ind, k)
#saving the alleles sampled
if(k == 1) {
sample_n_alleles = sum(temp_genind@tab[rows_to_samp,]>0)
} else {
sample_n_alleles = sum(colSums(temp_genind@tab[rows_to_samp,])>0)
}
}
} else {
#calculating the total alleles
total_alleles = ncol(temp_genind@tab)
#First, calculate number of individuals per population
n_ind <- table(temp_genind@pop)
##Then create a genpop file for temp_genind
Spp_tot_genpop <- genind2genpop(temp_genind)
##separate by population
Spp_tot_genind_sep <- seppop(temp_genind)
###Start sampling code
##determine alleles captured by sampling
alleles_cap <- colSums(temp_genind@tab[rows_to_samp,], na.rm = T)
#saving the proportion of alleles captured -> alleles sampled/total alleles
#represents genetic conservation success
#  all_quercus_results[i,k,j] = sample_n_alleles/total_alleles
#
#saving the total alleles present across the populations for each species, and each replicate
#  total_alleles_all_quercus[i,k,j] = total_alleles
#Fourth object: # of individuals per population
#  allele_cat_tot <- get.allele.cat(Spp_tot_genpop, c(1:5), 2, n_ind)
##calculate the total number of alleles in each frequency category over 9 allele categories
# for (a in 1:length(allele_cat_tot)) all_existing_by_sp_reps[j,a,i] <- sum((allele_cat_tot[[a]])>0,na.rm=T)
}
}
}
##########################################
############# Set directories ############
##########################################
##set directory to all butternut files
butternut_drive <- "C:\\Users\\eschumacher\\Documents\\GitHub\\butternut"
##########################################
############ Load in files ###############
##########################################
setwd(butternut_drive)
##load reorg genind
butternutgen_reorg <- read.genepop("data_files\\after_reorg\\reorg_gen_24pop.gen", ncode = 3)
butternutgen_reorg
setwd("G:/My Drive/Hoban_Lab_Docs/Projects/Butternut_JUCI")
############################################################
######### Load Loci Documents - Genepop 11 loci ############
############################################################
##load in documents
butternutgen_11loci <- read.genepop("DataFiles/24Populations/11loci/butternut_24pops.gen", ncode = 3)
##data frame to reduce loading
butternut_latlon <- read.csv("DataFiles/24Populations/11loci/butternut_24pops_lonlat.csv")
##load lat lon doc for individual names and population names
butternut_reorg_lonlat <- read.csv("data_files\\after_reorg\\reorg_lon_lat.csv")
##########################################
############# Set directories ############
##########################################
##set directory to all butternut files
butternut_drive <- "C:\\Users\\eschumacher\\Documents\\GitHub\\butternut"
##########################################
############ Load in files ###############
##########################################
setwd(butternut_drive)
##load lat lon doc for individual names and population names
butternut_reorg_lonlat <- read.csv("data_files\\after_reorg\\reorg_lon_lat.csv")
unique(butternut_reorg_lonlat$Pop)
?arp2gen
##load and convert post-geographic arp file to the genind file used for genetic analyses
butternutgen_reorg <- arp2gen("data_files\\after_reorg\\postgeog_24pop.arp")
butternutgen_reorg
##load and convert post-geographic arp file to the genind file used for genetic analyses
butternutgen_reorg <- arp2gen("data_files\\after_reorg\\postgeog_24pop.arp")
##load current working reorganized genepop file
butternutgen_reorg <- read.genepop("data_files\\after_reorg\\postgeog_24pop.gen", ncode = 3)
butternutgen_reorg
##reduce genind file for individuals with greater than 25% missing data
butternutgen_nomd <- missingno(butternutgen_reorg, type = "geno", cutoff = 0.25, quiet = FALSE, freq = FALSE)
library(poppr)
##reduce genind file for individuals with greater than 25% missing data
butternutgen_nomd <- missingno(butternutgen_reorg, type = "geno", cutoff = 0.25, quiet = FALSE, freq = FALSE)
butternutgen_nomd
butternutgen_reorg
1721-1635
setwd("G:/My Drive/Hoban_Lab_Docs/Projects/Butternut_JUCI")
############################################################
######### Load Loci Documents - Genepop 11 loci ############
############################################################
##load in documents
butternutgen_11loci <- read.genepop("DataFiles/24Populations/11loci/butternut_24pops.gen", ncode = 3)
setwd("G:/My Drive/Hoban_Lab_Docs/Projects/Butternut_JUCI")
############################################################
######### Load Loci Documents - Genepop 11 loci ############
############################################################
##load in documents
butternutgen_11loci <- read.genepop("DataFiles/24Populations/11loci/butternut_24pops_11loci.gen", ncode = 3)
##reduce based on missing data
butternutgen_nomd <- missingno(butternutgen_11loci, type = "geno", cutoff = 0.25, quiet = FALSE, freq = FALSE)
##load current working reorganized genepop file
butternutgen_reorg <- read.genepop("data_files\\after_reorg\\postgeo_rebin_24pop.gen", ncode = 3)
#####################################
############ Directories ############
#####################################
butternut_drive <- "C:\\Users\\eschumacher\\Documents\\GitHub\\butternut"
#####################################
############# Load Files ############
#####################################
setwd(butternut_drive)
##load current working reorganized genepop file
butternutgen_reorg <- read.genepop("data_files\\after_reorg\\postgeo_rebin_24pop.gen", ncode = 3)
##reduce genind file for individuals with greater than 25% missing data
butternutgen_nomd <- missingno(butternutgen_reorg, type = "geno", cutoff = 0.25, quiet = FALSE, freq = FALSE)
##write out no missing data genind file and then convert to genind in genalex
butternutgen_nomd <- genind2genalex(butternutgen_nomd, filename = "butternutgen_nomd.csv")
##write out genind file in genalex format
setwd("data_files\\after_reorg")
##write out no missing data genind file and then convert to genind in genalex
butternutgen_nomd <- genind2genalex(butternutgen_nomd, filename = "butternutgen_nomd.csv")
butternutgen_nomd
b
b
##load current working reorganized genepop file
butternutgen_reorg <- read.genepop("data_files\\after_reorg\\postgeo_rebin_24pop.gen", ncode = 3)
##reduce genind file for individuals with greater than 25% missing data
butternutgen_nomd <- missingno(butternutgen_reorg, type = "geno", cutoff = 0.25, quiet = FALSE, freq = FALSE)
##write out no missing data genind file and then convert to genind in genalex
butternutgen_nomd <- genind2genalex(butternutgen_nomd, filename = "butternutgen_nomd.csv")
##load relatedness file
reorg_relatedness <- read.csv("data_files\\after_reorg\\reorg_relatedness.csv")
#####################################
############ Directories ############
#####################################
butternut_drive <- "C:\\Users\\eschumacher\\Documents\\GitHub\\butternut"
#####################################
############# Load Files ############
#####################################
setwd(butternut_drive)
##load current working reorganized genepop file
butternutgen_reorg <- read.genepop("data_files\\after_reorg\\postgeo_rebin_24pop.gen", ncode = 3)
##reduce genind file for individuals with greater than 25% missing data
butternutgen_nomd <- missingno(butternutgen_reorg, type = "geno", cutoff = 0.25, quiet = FALSE, freq = FALSE)
##load relatedness file
reorg_relatedness <- read.csv("data_files\\after_reorg\\reorg_relatedness.csv")
##rename populations in genind no missing data file
levels(butternutgen_nomd@pop) <- unique(reorg_relatedness$Pop)
###################################################################
############# Reduced Individuals based on Relatedness ############
###################################################################
##rename populations in genind no missing data file
levels(butternutgen_nomd@pop) <- unique(reorg_relatedness$Pop)
##rename individuals in genind file
rownames(butternutgen_nomd@tab) <- reorg_relatedness$Ind
##create pop name code
butternut_24pop_names <- unique(reorg_relatedness$Pop)
###################################################################
############# Reduced Individuals based on Relatedness ############
###################################################################
##rename individuals in genind file
rownames(butternutgen_nomd@tab) <- reorg_relatedness$Ind
##create pop name code
butternut_24pop_names <- unique(reorg_relatedness$Pop)
##rename populations in genind no missing data file
levels(butternutgen_nomd@pop) <- butternut_24pop_names
####reduce relatedness
##run relatedness code
reorg_relate_df <- Demerelate(reorg_relatedness, object = T, value = "loiselle")
library(adegenet)
library(Demerelate)
library(poppr)
####reduce relatedness
##run relatedness code
reorg_relate_df <- Demerelate(reorg_relatedness, object = T, value = "loiselle")
##now identify how many individuals have greater than 25% relatedness = half siblings
butternut_halfsib_names <- names(which(unlist(reorg_relate_df$Empirical_Relatedness) > 0.25))
##then use this to create a document which has all the unique individual numbers for every highly related individuals
butternut_halfsib_names_cleanfront <- gsub("^.*\\.","", butternut_halfsib_names)
butternut_halfsib_names_cleanback <- gsub("^.*\\_","", butternut_halfsib_names_cleanfront)
relate_ind_remove <- unique(butternut_halfsib_names_cleanback)
##then subset genind file
butternutgen_relatedness_reduced <- butternutgen_reorg[!rownames(butternutgen_reorg@tab) %in% relate_ind_remove,]
##subset data frame
reorg_relatedness_reduced <- reorg_relatedness[!reorg_relatedness$Ind %in% relate_ind_remove,]
butternutgen_relatedness_reduced
##then subset genind file
butternutgen_relatedness_reduced <- butternutgen_nomd[!rownames(butternutgen_nomd@tab) %in% relate_ind_remove,]
butternutgen_relatedness_reduced
##subset data frame
reorg_relatedness_reduced <- reorg_relatedness[!reorg_relatedness$Ind %in% relate_ind_remove,]
View(reorg_relatedness_reduced)
###name pops
levels(butternutgen_relatedness_reduced@pop) <- butternut_24pop_names
##write out no missing data genind file and then convert to genind in genalex
butternutgen_nomd <- genind2genalex(butternutgen_nomd, filename = "butternutgen_nomd.csv")
##write out no missing data genind file and then convert to genind in genalex
butternutgen_nomd <- genind2genalex(butternutgen_nomd, filename = "butternutgen_nomd.csv", overwrite = TRUE)
##load genind
butternutgen_nomd <- arp2gen("data_files\\after_reorg\\butternutgen_nomd.arp")
##remove missing data
butternutgen_reorg <- read.genepop("data_files\\after_reorg\\butternutgen_nomd.gen", ncode = 3)
##load lat lon doc for individual names and population names
butternut_reorg_lonlat <- read.csv("data_files\\after_reorg\\reorg_lon_lat.csv")
##load in mean lon and lat document
butternut_mean_lon_lat <- read.csv("data_files\\geographic_files\\butternut_coord_df.csv")
##create population name doc
butternut_24pop_names <- unique(butternut_reorg_lonlat$Pop)
##name individuals in genind doc
rownames(butternutgen_reorg@tab) <- butternut_reorg_lonlat$Ind
##name populations in genind doc
levels(butternutgen_reorg@pop) <- butternut_24pop_names
library(adegenet)
library(diveRsity)
#####################################
############ Directories ############
#####################################
##set directory to all butternut files
butternut_drive <- "C:\\Users\\eschumacher\\Documents\\GitHub\\butternut"
#####################################
############# Load Files ############
#####################################
setwd(butternut_drive)
##load current reorganized and reduced genepop with reduced by relatedness
butternutgen_red <- arp2gen("data_files\\after_reorg\\butternutgen_relatedness_reduced.arp")
##load genind file
butternutgen_relate <- read.genepop("data_files\\after_reorg\\butternutgen_relatedness_reduced.gen", ncode = 3)
##load relatedness data frame
reorg_relatedness_df <- read.csv("data_files\\after_reorg\\reorg_relatedness_reduced.csv")
##rename individuals in genind file
rownames(butternutgen_relate@tab) <- reorg_relatedness_df$Ind
