genstat_rp <- vector('expression',2)
genstat_rp[1] <- substitute(expression(italic(R)^2 == MYVALUE),
list(MYVALUE = format(genstat_r2,dig=3)))[2]
genstat_rp[2] = substitute(expression(italic(p) == MYOTHERVALUE),
list(MYOTHERVALUE = format(genstat_pvalue, digits = 2)))[2]
##plot linear regression
abline(genstat_lm, col = line_colors[i], lwd = 2)
###save rp values in a data frame
if(j==1){allrich_rp[i,c(1:2)] <- c(genstat_r2, genstat_pvalue)}
if(j==2){hexp_rp[i,c(1:2)] <- c(genstat_r2, genstat_pvalue)}
##generate quadratic regressions
}else{
#calculate data points
lat_points <- stat_lat_df[which_pops[[i]],1]
lat_points2 <- lat_points^2
###Quadratic linear model
genstat_quad_model_lm <-lm(stat_lat_df[which_pops[[i]],2] ~
lat_points + lat_points2)
##Calculate summary documents
genstat_quad_model_lm_sum <- summary(genstat_quad_model_lm)
##calculate y-axis values
quad_values <- seq(min(stat_lat_df[,1]), max(stat_lat_df[,1]), 0.5)
quad_counts <- predict(genstat_quad_model_lm, list(lat_points=quad_values, lat_points2=quad_values^2))
##create r2 and p values
genstat_r2 <- genstat_quad_model_lm_sum$adj.r.squared
genstat_pvalue <- genstat_quad_model_lm_sum$coefficients[2,4]
genstat_rp <- vector('expression',2)
genstat_rp[1] <- substitute(expression(italic(R)^2 == MYVALUE),
list(MYVALUE = format(genstat_r2,dig=3)))[2]
genstat_rp[2] = substitute(expression(italic(p) == MYOTHERVALUE),
list(MYOTHERVALUE = format(genstat_pvalue, digits = 2)))[2]
##plot quadratic line on the plot
lines(quad_values, quad_counts, col = line_colors[i], lwd = 2)
##save values in data frames
if(j==1){allrich_rp[i-4,c(3:4)] <- c(genstat_r2, genstat_pvalue)}
if(j==2){hexp_rp[i-4,c(3:4)] <- c(genstat_r2, genstat_pvalue)}
}
##Write legend
legend(loc_legend[i], legend = genstat_rp, bty = 'n', border = "black",
pt.cex = 1, cex = 0.8, pch = 17, col = line_colors[i],
title = title_legend[i])
legend('bottom', legend = c("New Brunswick", "Ontario", "Quebec","United States"),
pch = 17, col = c("firebrick1", "firebrick4","lightsalmon","dodgerblue"))
#if(i==2|i==6) dev.off()
}else{
if (i==1|i==3)
plot(stat_dist_df[which_pops[[i]],2]~stat_dist_df[which_pops[[i]],1], col = stat_dist_df[which_pops[[i]],3],
pch = 17,
main = paste(stat_name,"Compared to Distance to Edge (km)"), ylab = stat_name,
xlab = "Distance to Edge (km)", cex = (butternut_poppr[which_pops[[i]],2]/50), ylim = c(y_low,y_high))
##write text
if (i==1|i==3) text(stat_dist_df[which_pops[[i]],2]~stat_dist_df[which_pops[[i]],1],
labels = butternut_24pop_names[which_pops[[i]]], cex = 0.8, pos = 1)
if(i==1|i==2|i==3|i==4){
##create a linear model
gendist_lm <- lm(stat_dist_df[which_pops[[i]],2]~stat_dist_df[which_pops[[i]],1])
gendist_lm_sum <- summary(gendist_lm)
##create r2 and p values
gendist_r2 <- gendist_lm_sum$adj.r.squared
gendist_pvalue <- gendist_lm_sum$coefficients[2,4]
gendist_rp <- vector('expression',2)
gendist_rp[1] <- substitute(expression(italic(R)^2 == MYVALUE),
list(MYVALUE = format(gendist_r2,dig=3)))[2]
gendist_rp[2] = substitute(expression(italic(p) == MYOTHERVALUE),
list(MYOTHERVALUE = format(gendist_pvalue, digits = 2)))[2]
##save values in data frames
if(j==3){allrich_rp[i+4,c(1:2)] <- c(gendist_r2, gendist_pvalue)}
if(j==4){hexp_rp[i+4,c(1:2)] <- c(gendist_r2, gendist_pvalue)}
abline(gendist_lm, col = line_colors[i], lwd = 2)
##Write legend
legend(loc_legend[i], legend = gendist_rp, bty = 'n', border = "black",
pt.cex = 1, cex = 0.8, pch = 17, col = line_colors[i],
title = title_legend[i])
legend('bottom', legend = c("New Brunswick", "Ontario", "Quebec","United States"),
pch = 17, col = c("firebrick1", "firebrick4","lightsalmon","dodgerblue"))
}
}
}
}
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
##write out tables of r2 and p values
##name rows and columns
rownames(allrich_rp) <- c("Lat_AllPops","Lat_woWI", "Lat_WithWI_woNB","Lat_woWI_woNB",
"Dist_Edge_AllPops","Dist_Edge_woWI", "Dist_Edge_WithWI_woNB","Dist_Edge_woWI_woNB" )
colnames(allrich_rp) <- c("R2 Linear", "p-value Linear", "R2 Quadratic", "p-value Quadratic")
##rename columns and rownames for hexp r2 and pvalues
rownames(hexp_rp) <- c("Lat_AllPops","Lat_woWI", "Lat_WithWI_woNB","Lat_woWI_woNB",
"Dist_Edge_AllPops","Dist_Edge_woWI", "Dist_Edge_WithWI_woNB","Dist_Edge_woWI_woNB" )
colnames(hexp_rp) <- c("R2 Linear", "p-value Linear", "R2 Quadratic", "p-value Quadratic")
##round of significant tables
allrich_rp <- signif(allrich_rp,2)
hexp_rp <- signif(hexp_rp,2)
##write out csv
write.csv(allrich_rp, "Genetic_Analyses\\genetic_analyses_results\\allrich_rp_df.csv")
write.csv(hexp_rp, "Genetic_Analyses\\genetic_analyses_results\\hexp_rp_df.csv")
##write out csv
write.csv(allrich_rp, "Genetic_Analyses\\genetic_analyses_results\\allrich_rp_df.csv")
write.csv(hexp_rp, "Genetic_Analyses\\genetic_analyses_results\\hexp_rp_df.csv")
##create data frame
butternut_coord_df <- cbind(butternut_mean_lon, butternut_mean_lat)
##load lat lon doc for individual names and population names
butternut_reorg_lonlat <- read.csv("Genetic_Analyses\\data_files\\after_reorg\\reorg_lon_lat.csv")
##load in mean lon and lat document
butternut_mean_lon_lat <- read.csv("Genetic_Analyses\\data_files\\geographic_files\\butternut_coord_df.csv")
####Geographic analyses for each population
##calculate mean longitude and latitude for each population
butternut_mean_lon <- matrix()
butternut_mean_lat <- matrix()
##loops for mean lat/lon
for(pop in butternut_24pop_names){
butternut_mean_lon[pop] <- mean(butternut_reorg_lonlat[butternut_reorg_lonlat$Pop == pop,][,3])
}
for(pop in butternut_24pop_names){
butternut_mean_lat[pop] <- mean(butternut_reorg_lonlat[butternut_reorg_lonlat$Pop == pop,][,4])
}
##now combine into dataframes
butternut_coords_df <- cbind(butternut_mean_lon, butternut_mean_lat)[-1,]
#project range extent buffer to the same extent as population lon/lat
butternut_buffer_trans <- sp::spTransform(butternut_buffer, "+proj=longlat +ellps=WGS84 +datum=WGS84")
##load range buffer for butternut
butternut_buffer <- readOGR(dsn = paste0(butternut_drive,"\\Genetic_Analyses\\data_files\\geographic_files") ,
layer = "butternut_buffer")
#project range extent buffer to the same extent as population lon/lat
butternut_buffer_trans <- sp::spTransform(butternut_buffer, "+proj=longlat +ellps=WGS84 +datum=WGS84")
##now calculate distance to butternut range edge
butternut_dist <- dist2Line(butternut_coords_df, butternut_buffer_trans)
butternut_dist
butternut_dist[,1]/1000
##
butternut_dist <- butternut_dist[,1]/1000
###create hexp
BN_hexp <- BN_poppr[1:24,10]
summary(lm(BN_hexp~butternut_dist))
summary(lm(BN_hexp[-c(16,22,23),]~butternut_dist[-c(16,22,23),]))
BN_hexp[-c(16,22,23),]
BN_hexp[-c(16,22,23)]
summary(lm(BN_hexp[-c(16,22,23)]~butternut_dist[-c(16,22,23)]))
bn_df <- cbind(butternut_dist, BN_hexp)
##Quadratic Regression
####points
points_hexp <- bn_df[,2]
points2_hexp <- points_hexp^2
###Quadratic linear model
quadratic_model_hexp_lm <-lm(hexp_lat_df[,4] ~
points_hexp + points2_hexp)
bn_df
##Quadratic Regression
####points
points_hexp <- bn_df[,1]
points2_hexp <- points_hexp^2
###Quadratic linear model
quadratic_model_hexp_lm <-lm(hexp_lat_df[,2] ~
points_hexp + points2_hexp)
##Set up model
quadratic_model_hexp_lm_sum <- summary(quadratic_model_hexp_lm)
#pointsance models
points_hexp_values <- seq(min(bn_df[,1]), max(bn_df[,1]), 5)
points_hexp_counts <- predict(quadratic_model_hexp_lm,list(points_hexp=points_hexp_values,
points2_hexp=points_hexp_values^2))
###pointsance without wisconsin populations
points_hexp_21 <- bn_df[-c(16,22,23),1]
points2_hexp_21 <- points_hexp^2
##Quadratic Regression
####points
points_hexp <- bn_df[,1]
points2_hexp <- points_hexp^2
###Quadratic linear model
quadratic_model_hexp_lm <-lm(bn_df[,1] ~
points_hexp + points2_hexp)
##Set up model
quadratic_model_hexp_lm_sum <- summary(quadratic_model_hexp_lm)
##Quadratic Regression
####points
points_hexp <- bn_df[,1]
points2_hexp <- points_hexp^2
###Quadratic linear model
quadratic_model_hexp_lm <-lm(bn_df[,1] ~
points_hexp + points2_hexp)
quadratic_model_hexp_lm
summary(quadratic_model_hexp_lm)
bn_df
##Quadratic Regression
####points
points_hexp <- bn_df[,1]
points2_hexp <- points_hexp^2
###Quadratic linear model
quadratic_model_hexp_lm <-lm(bn_df[,2] ~
points_hexp + points2_hexp)
##Set up model
quadratic_model_hexp_lm_sum <- summary(quadratic_model_hexp_lm)
quadratic_model_hexp_lm_sum
plot(bn_df[,1], bn_df[,2])
butternut_mean_lon_lat[,2]
butternut_mean_lon_lat[,3]
bn_df <- cbind(butternut_mean_lon_lat[,3], BN_hexp)
plot(bn_df[,1], bn_df[,2])
##Quadratic Regression
####points
points_hexp <- bn_df[,1]
points2_hexp <- points_hexp^2
###Quadratic linear model
quadratic_model_hexp_lm <-lm(bn_df[,2] ~
points_hexp + points2_hexp)
##Set up model
quadratic_model_hexp_lm_sum <- summary(quadratic_model_hexp_lm)
quadratic_model_hexp_lm_sum
#pointsance models
points_hexp_values <- seq(min(bn_df[,1]), max(bn_df[,1]), 5)
points_hexp_counts <- predict(quadratic_model_hexp_lm,list(points_hexp=points_hexp_values,
points2_hexp=points_hexp_values^2))
###pointsance without wisconsin populations
points_hexp_21 <- bn_df[-c(16,22,23),1]
points2_hexp_21 <- points_hexp^2
######Quadratic
quadratic_21pops_model_lm <-lm(bn_df[-c(16,22,23),2] ~
points_hexp_21 + points2_hexp_21)
###pointsance without wisconsin populations
points_hexp_21 <- bn_df[-c(16,22,23),1]
points2_hexp_21 <- points_hexp^2
bn_df[-c(16,22,23),2]
length(bn_df[-c(16,22,23),2])
length(points_hexp_21)
length(points2_hexp_21)
###pointsance without wisconsin populations
points_hexp_21 <- bn_df[-c(16,22,23),1]
points2_hexp_21 <- points_hexp_21^2
######Quadratic
quadratic_21pops_model_lm <-lm(bn_df[-c(16,22,23),2] ~
points_hexp_21 + points2_hexp_21)
quadratic_21pops_model_lm_sum <- summary(quadratic_21pops_model_lm)
quadratic_21pops_model_lm_sum
butternut_mean_lonlat
bn_df
##create data frame
butternut_stat_df <- cbind(butternut_coords_df[,c(1:2)], (butternut_dist[,1]/1000),
BN_ind, BN_nall, BN_all_rich, BN_hexp)
BN_hexp
##create data frame
butternut_stat_df <- cbind(butternut_coords_df[,c(1:2)], (butternut_dist[,1]/1000),
BN_ind, BN_nall, BN_all_rich, BN_hexp[1:24,])
butternut_coords_df
######################################
############# basic stats ############
######################################
##reorg data file
bn_sumstats <- summary(butternutgen_reorg)
##create poppr file
BN_poppr <- poppr(butternutgen_reorg)
##expected heterozygosity
BN_hexp <- BN_poppr[1:24, 10]
##allele numbers by pop
BN_nall <- bn_sumstats$pop.n.all
##individual numbers
BN_ind <- BN_poppr[1:24, 2:3]
##allelic richness code
BN_alleles <-bn_sumstats$pop.n.all/length(butternutgen_reorg@loc.n.all)
BN_all_rich <- colMeans(allelic.richness(butternutgen_reorg)$Ar)
####Geographic analyses for each population
##calculate mean longitude and latitude for each population
butternut_mean_lon <- matrix()
butternut_mean_lat <- matrix()
##loops for mean lat/lon
for(pop in butternut_24pop_names){
butternut_mean_lon[pop] <- mean(butternut_reorg_lonlat[butternut_reorg_lonlat$Pop == pop,][,3])
}
for(pop in butternut_24pop_names){
butternut_mean_lat[pop] <- mean(butternut_reorg_lonlat[butternut_reorg_lonlat$Pop == pop,][,4])
}
##now combine into dataframes
butternut_coords_df <- cbind(butternut_mean_lon, butternut_mean_lat)[-1,]
#project range extent buffer to the same extent as population lon/lat
butternut_buffer_trans <- sp::spTransform(butternut_buffer, "+proj=longlat +ellps=WGS84 +datum=WGS84")
##now calculate distance to butternut range edge
butternut_dist <- dist2Line(butternut_coords_df, butternut_buffer_trans)
##add regional names
butternut_regions <- c("New Brunswick","New Brunswick", "New Brunswick", "New Brunswick", "New Brunswick",
"New Brunswick", "Ontario", "Quebec","Ontario","Ontario","Quebec",
"United States", "United States", "United States", "United States", "United States",
"United States", "United States", "United States", "United States", "United States",
"United States", "United States", "United States")
##create data frame
butternut_stat_df <- cbind(butternut_coords_df[,c(1:2)], (butternut_dist[,1]/1000),
BN_ind, BN_nall, BN_all_rich, BN_hexp)
butternut_stat_df <- cbind(butternut_regions, butternut_stat_df)
##name columns and rows
rownames(butternut_stat_df) <- c(1:24)
colnames(butternut_stat_df) <- c("Region","Mean Longitude", "Mean Latitude", "Distance to Range Edge (km)",
"Number of Individuals",
"MLG","Number of Alleles", "Allelic Richness", "Expected Heterozygosity")
##write out csv
write.csv(butternut_stat_df, "Genetic_Analyses\\genetic_analyses_results\\butternut_stat_df.csv")
BN_hexp
##write out csv
write.csv(butternut_stat_df, "Genetic_Analyses\\genetic_analyses_results\\butternut_stat_df.csv")
summary(lm(butternut_stat_df$`Expected Heterozygosity` ~ butternut_stat_df$`Mean Latitude`))
summary(lm(butternut_stat_df$`Expected Heterozygosity`[-c(16,22,23),] ~ butternut_stat_df$`Mean Latitude`[-c(16,22,23),]))
summary(lm(butternut_stat_df$`Expected Heterozygosity`[-c(16,22,23)] ~ butternut_stat_df$`Mean Latitude`[-c(16,22,23)]))
summary(lm(butternut_stat_df$`Expected Heterozygosity` ~ butternut_stat_df$`Distance to Range Edge (km)`))
summary(lm(butternut_stat_df$`Expected Heterozygosity`[-c(16,22,23)] ~ butternut_stat_df$`Distance to Range Edge (km)`[-c(16,22,23)]))
####points
points_hexp <- butternut_stat_df$`Mean Latitude`
points2_hexp <- points_hexp^2
###Quadratic linear model
quadratic_model_hexp_lm <-lm(butternut_stat_df$`Expected Heterozygosity` ~
points_hexp + points2_hexp)
##Set up model
quadratic_model_hexp_lm_sum <- summary(quadratic_model_hexp_lm)
quadratic_model_hexp_lm_sum
###pointsance without wisconsin populations
points_hexp_21 <- butternut_stat_df$`Mean Latitude`[-c(16,22,23)]
points2_hexp_21 <- points_hexp_21^2
######Quadratic
quadratic_21pops_model_lm <-lm(butternut_stat_df$`Expected Heterozygosity` ~
points_hexp_21 + points2_hexp_21)
quadratic_21pops_model_lm_sum <- summary(quadratic_21pops_model_lm)
######Quadratic
quadratic_21pops_model_lm <-lm(butternut_stat_df$`Expected Heterozygosity`[-c(16,22,23)] ~
points_hexp_21 + points2_hexp_21)
quadratic_21pops_model_lm_sum <- summary(quadratic_21pops_model_lm)
quadratic_21pops_model_lm_sum
##load in genetic diversity stats
butternut_gendiv_stats <- read.csv("Genetic_Analyses\\genetic_analyses_results\\butternut_stat_df.csv")
View(butternut_gendiv_stats)
butternut_gendiv_stats[,2]
butternut_gendiv_stats[,3]
butternut_gendiv_stats[,4]
butternut_gendiv_stats[,8]
butternut_gendiv_stats[,9]
butternut_gendiv_stats[,5]
##create df with allelic richness and latitude
all_rich_lat_df <- data.frame(cbind(butternut_gendiv_stats[,4], butternut_gendiv_stats[,9]))
##create data frame with heterozygosity and latitude
hexp_lat_df <- data.frame(cbind(butternut_gendiv_stats[,4], butternut_gendiv_stats[,10]))
##distance to edge data frames with genetic diversity stats
all_rich_dist_edge_df <- data.frame(cbind(butternut_gendiv_stats[,5], butternut_gendiv_stats[,9]))
hexp_dist_edge_df <- data.frame(cbind(butternut_gendiv_stats[,5], butternut_gendiv_stats[,10]))
##data frames to save all rp values
allrich_rp <- matrix(nrow = 8, ncol = 4)
##create data frame to save hexp
hexp_rp <- matrix(nrow = 8, ncol = 4)
#The loop will go over the two statistics, 1 = alleles, 2 = heterozygosity; 1 and 2 are compared to latitude
##3 and 4 are compared to distance to edge
for (j in 1:4){
#This will set y limits and axis titles to match the statistic
if (j==1) {stat_lat_df<-all_rich_lat_df; y_low<-5; y_high<-10; stat_name<-"Allelic Richness"}
if (j==2) {stat_lat_df<-hexp_lat_df; y_low<-0.74; y_high<-0.86; stat_name<-"Expected Heterozygosity"}
if (j==3) {stat_dist_df<-all_rich_dist_edge_df; y_low<-5; y_high<-10; stat_name<-"Allelic Richness"}
if (j==4) {stat_dist_df<-hexp_dist_edge_df; y_low<-0.74; y_high<-0.86; stat_name<-"Expected Heterozygosity"}
##creates color column and names rows and columns
colnames(stat_lat_df) <- c("Mean_Lat", stat_name)
rownames(stat_lat_df) <- butternut_24pop_names
stat_lat_df$Color <- NA
stat_lat_df[1:6,3] <- "firebrick1"
stat_lat_df[c(8,11),3] <- "lightsalmon"
stat_lat_df[c(7,9:10),3] <- "firebrick4"
stat_lat_df[12:24,3] <- "dodgerblue"
#This loop will go over the eight possibilities (the list which_pops), with and without NB and Wisconsin
#1 and 3 are linear models with latitude
#5 and 7 are quadratic models with latitude and genetic diversity stats
#On loops 2, 4, 6, 8 it prints without Wisconsin regression on top of the existing plot
for (i in 1:8){
#linear regressions
if (i==1&j==1) pdf("Genetic_Analyses\\genetic_analyses_results\\all_rich_lat_linear.pdf", width = 8, height = 6)
if (i==1&j==2) pdf("Genetic_Analyses\\genetic_analyses_results\\hexp_lat_linear.pdf", width = 8, height = 6)
if (i==3&j==1) pdf("Genetic_Analyses\\genetic_analyses_results\\all_rich_lat_linear_Wo_NB.pdf", width = 8, height = 6)
if (i==3&j==2) pdf("Genetic_Analyses\\genetic_analyses_results\\hexp_lat_linear_Wo_NB.pdf", width = 8, height = 6)
##quadratic regressions
if (i==5&j==1) pdf("Genetic_Analyses\\genetic_analyses_results\\all_rich_lat_quad.pdf", width = 8, height = 6)
if (i==5&j==2) pdf("Genetic_Analyses\\genetic_analyses_results\\hexp_lat_quad.pdf", width = 8, height = 6)
if (i==7&j==1) pdf("Genetic_Analyses\\genetic_analyses_results\\all_rich_lat_quad_Wo_NB.pdf", width = 8, height = 6)
if (i==7&j==2) pdf("Genetic_Analyses\\genetic_analyses_results\\hexp_lat_quad_Wo_NB.pdf", width = 8, height = 6)
##distance to range edge linear regressions
if (i==1&j==3) pdf("Genetic_Analyses\\genetic_analyses_results\\all_rich_dist_edge_linear.pdf", width = 8, height = 6)
if (i==1&j==4) pdf("Genetic_Analyses\\genetic_analyses_results\\hexp_edge_linear.pdf", width = 8, height = 6)
if (i==3&j==3) pdf("Genetic_Analyses\\genetic_analyses_results\\all_rich_dist_edge_linear_Wo_NB.pdf", width = 8, height = 6)
if (i==3&j==4) pdf("Genetic_Analyses\\genetic_analyses_results\\hexp_edge_linear_Wo_NB.pdf", width = 8, height = 6)
if(j==1|j==2){
##create plot
if (i==1|i==3|i==5|i==7) plot(stat_lat_df[which_pops[[i]],2]~stat_lat_df[which_pops[[i]],1],
col = stat_lat_df[which_pops[[i]],3],
pch = 17,
main = paste(stat_name,"Compared to Mean Latitude"), ylab = stat_name,
xlab = "Mean Latitude", cex = (butternut_poppr[which_pops[[i]],2]/50), ylim = c(y_low,y_high))
##write text
if (i==1|i==3|i==5|i==7) text(stat_lat_df[which_pops[[i]],2]~stat_lat_df[which_pops[[i]],1],
labels = butternut_24pop_names[which_pops[[i]]], cex = 0.8, pos = 1)
if(i==1|i==2|i==3|i==4){
##create a linear model
genstat_lm <- lm(stat_lat_df[which_pops[[i]],2]~stat_lat_df[which_pops[[i]],1])
genstat_lm_sum <- summary(genstat_lm)
##create r2 and p values
genstat_r2 <- genstat_lm_sum$adj.r.squared
genstat_pvalue <- genstat_lm_sum$coefficients[2,4]
genstat_rp <- vector('expression',2)
genstat_rp[1] <- substitute(expression(italic(R)^2 == MYVALUE),
list(MYVALUE = format(genstat_r2,dig=3)))[2]
genstat_rp[2] = substitute(expression(italic(p) == MYOTHERVALUE),
list(MYOTHERVALUE = format(genstat_pvalue, digits = 2)))[2]
##plot linear regression
abline(genstat_lm, col = line_colors[i], lwd = 2)
###save rp values in a data frame
if(j==1){allrich_rp[i,c(1:2)] <- c(genstat_r2, genstat_pvalue)}
if(j==2){hexp_rp[i,c(1:2)] <- c(genstat_r2, genstat_pvalue)}
##generate quadratic regressions
}else{
#calculate data points
lat_points <- stat_lat_df[which_pops[[i]],1]
lat_points2 <- lat_points^2
###Quadratic linear model
genstat_quad_model_lm <-lm(stat_lat_df[which_pops[[i]],2] ~
lat_points + lat_points2)
##Calculate summary documents
genstat_quad_model_lm_sum <- summary(genstat_quad_model_lm)
##calculate y-axis values
quad_values <- seq(min(stat_lat_df[,1]), max(stat_lat_df[,1]), 0.5)
quad_counts <- predict(genstat_quad_model_lm, list(lat_points=quad_values, lat_points2=quad_values^2))
##create r2 and p values
genstat_r2 <- genstat_quad_model_lm_sum$adj.r.squared
genstat_pvalue <- genstat_quad_model_lm_sum$coefficients[2,4]
genstat_rp <- vector('expression',2)
genstat_rp[1] <- substitute(expression(italic(R)^2 == MYVALUE),
list(MYVALUE = format(genstat_r2,dig=3)))[2]
genstat_rp[2] = substitute(expression(italic(p) == MYOTHERVALUE),
list(MYOTHERVALUE = format(genstat_pvalue, digits = 2)))[2]
##plot quadratic line on the plot
lines(quad_values, quad_counts, col = line_colors[i], lwd = 2)
##save values in data frames
if(j==1){allrich_rp[i-4,c(3:4)] <- c(genstat_r2, genstat_pvalue)}
if(j==2){hexp_rp[i-4,c(3:4)] <- c(genstat_r2, genstat_pvalue)}
}
##Write legend
legend(loc_legend[i], legend = genstat_rp, bty = 'n', border = "black",
pt.cex = 1, cex = 0.8, pch = 17, col = line_colors[i],
title = title_legend[i])
legend('bottom', legend = c("New Brunswick", "Ontario", "Quebec","United States"),
pch = 17, col = c("firebrick1", "firebrick4","lightsalmon","dodgerblue"))
#if(i==2|i==6) dev.off()
}else{
if (i==1|i==3)
plot(stat_dist_df[which_pops[[i]],2]~stat_dist_df[which_pops[[i]],1], col = stat_dist_df[which_pops[[i]],3],
pch = 17,
main = paste(stat_name,"Compared to Distance to Edge (km)"), ylab = stat_name,
xlab = "Distance to Edge (km)", cex = (butternut_poppr[which_pops[[i]],2]/50), ylim = c(y_low,y_high))
##write text
if (i==1|i==3) text(stat_dist_df[which_pops[[i]],2]~stat_dist_df[which_pops[[i]],1],
labels = butternut_24pop_names[which_pops[[i]]], cex = 0.8, pos = 1)
if(i==1|i==2|i==3|i==4){
##create a linear model
gendist_lm <- lm(stat_dist_df[which_pops[[i]],2]~stat_dist_df[which_pops[[i]],1])
gendist_lm_sum <- summary(gendist_lm)
##create r2 and p values
gendist_r2 <- gendist_lm_sum$adj.r.squared
gendist_pvalue <- gendist_lm_sum$coefficients[2,4]
gendist_rp <- vector('expression',2)
gendist_rp[1] <- substitute(expression(italic(R)^2 == MYVALUE),
list(MYVALUE = format(gendist_r2,dig=3)))[2]
gendist_rp[2] = substitute(expression(italic(p) == MYOTHERVALUE),
list(MYOTHERVALUE = format(gendist_pvalue, digits = 2)))[2]
##save values in data frames
if(j==3){allrich_rp[i+4,c(1:2)] <- c(gendist_r2, gendist_pvalue)}
if(j==4){hexp_rp[i+4,c(1:2)] <- c(gendist_r2, gendist_pvalue)}
abline(gendist_lm, col = line_colors[i], lwd = 2)
##Write legend
legend(loc_legend[i], legend = gendist_rp, bty = 'n', border = "black",
pt.cex = 1, cex = 0.8, pch = 17, col = line_colors[i],
title = title_legend[i])
legend('bottom', legend = c("New Brunswick", "Ontario", "Quebec","United States"),
pch = 17, col = c("firebrick1", "firebrick4","lightsalmon","dodgerblue"))
}
}
}
}
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
##write out tables of r2 and p values
##name rows and columns
rownames(allrich_rp) <- c("Lat_AllPops","Lat_woWI", "Lat_WithWI_woNB","Lat_woWI_woNB",
"Dist_Edge_AllPops","Dist_Edge_woWI", "Dist_Edge_WithWI_woNB","Dist_Edge_woWI_woNB" )
colnames(allrich_rp) <- c("R2 Linear", "p-value Linear", "R2 Quadratic", "p-value Quadratic")
##rename columns and rownames for hexp r2 and pvalues
rownames(hexp_rp) <- c("Lat_AllPops","Lat_woWI", "Lat_WithWI_woNB","Lat_woWI_woNB",
"Dist_Edge_AllPops","Dist_Edge_woWI", "Dist_Edge_WithWI_woNB","Dist_Edge_woWI_woNB" )
colnames(hexp_rp) <- c("R2 Linear", "p-value Linear", "R2 Quadratic", "p-value Quadratic")
##round of significant tables
allrich_rp <- signif(allrich_rp,2)
hexp_rp <- signif(hexp_rp,2)
##write out csv
write.csv(allrich_rp, "Genetic_Analyses\\genetic_analyses_results\\allrich_rp_df.csv")
write.csv(hexp_rp, "Genetic_Analyses\\genetic_analyses_results\\hexp_rp_df.csv")
