Based on code generated by Peter Breslin (ASU) and Fabio Suzart de Albuquerque 

##libraries 
library(raster)
library(sp)
library(sf)
library(rworldmap)
library(rgdal)
library(spdep)
library(rgeos)
library(dismo)
library(gbm)
library(AUC)
library(ggplot2)
library(plyr)
library(HH)
library(ltm)

##set working directory
##load data points
setwd("G:/My Drive/Hoban_Lab_Docs/Projects/Butternut_JUCI")

######################################################################
################# Reduce Spatial Autocorrelation #####################
######################################################################
##read in occurrence records
butternut_presence <- read.csv("SDMs/InputFiles/Points/butternut_occurrence_points.csv")
butternut_presence <- butternut_presence[,-1]

##Now set spatial reference for the points
coordinates(butternut_presence) <- c('Longitude', 'Latitude')
proj4string(butternut_presence) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")

##First we need to reduce spatial autocorrelation

#####100 meters
points_matrix <- gWithinDistance(butternut_limit_proj, dist = .00086206895, byid = TRUE)
#####300 meters
points_matrix <- gWithinDistance(butternut_limit_proj, dist = .00258620685, byid = TRUE)
######500 m
points_matrix <- gWithinDistance(butternut_limit_proj, dist = .0043103448, byid = TRUE)
#####1 km
points_matrix <- gWithinDistance(butternut_limit_proj, dist = .0086206897, byid = TRUE)
####2km
points_matrix <- gWithinDistance(butternut_limit_proj, dist = .0172413794, byid = TRUE)

##create tri matrix with NAs for bottom rows
points_matrix[lower.tri(points_matrix, diag=TRUE)] <- NA

##now determine where points within 1 km are 
auto_cols <- colSums(points_matrix, na.rm=TRUE) == 0

##now subset the original data by this 
occurrence_wo_auto <- butternut_presence[auto_cols,]

##convert to a data frame
occurrence_no_auto <-data.frame(occurrence_wo_auto)

##remove columns with no points 
occurrence_no_auto <- na.omit(occurrence_wo_auto)

##write to file
write.csv(occurence_wo_auto, "SDMs/InputFiles/Points/occurrence_final.csv")

######################################################################
############################ Plotting ################################
######################################################################

##set limits
min_lon <- min(occurrence_wo_auto$Longitude)
max_lon <- max(occurrence_wo_auto$Longitude)
min_lat <- min(occurrence_wo_auto$Latitude)
max_lat <- max(occurrence_wo_auto$Latitude)

##turns coordinates into Spatial Points
coordinates(occurrence_no_auto) <- c('Longitude', 'Latitude')
proj4string(occurrence_no_auto) <- CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")

##get map
newmap <- getMap(resolution = "low")

##now plot
plot(newmap, xlim = c(min_lon, max_lon), ylim = c(min_lat, max_lat))
points(occurrence_no_auto, col = "dodgerblue", pch = 16)

######################################################################
################# Generated Pseudo-Absence Points ####################
######################################################################
##remove duplicate points
occurrence_no_auto <- remove.duplicates(occurrence_no_auto)

##transform to Albers for presence points
occurence_presence <- spTransform(occurrence_no_auto, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"))

##load in cropped raster
extent <- arc.open("C:/Users/eschumacher/Documents/ArcGIS/Projects/butternutSDM/butternutSDM.gdb/elevation_Clip1")
extent_arc <- arc.raster(extent)
extent_raster <- as.raster(extent_arc)

##project extent raster to Albers
extent_project <- projectRaster(extent_raster, crs = "+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")

##Now start generating background points
background <- randomPoints(extent_project, 5443)

##now create spatial points object for absence points 
set.seed(25)
background_2 <- gridSample(background, extent_project, n=1) 
bg_proj <- SpatialPoints(background_2, proj4string=CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"))

##Create spatial points object for presence points 
set.seed(8)
extent_sample <- gridSample(occurence_presence, extent_project, n=1) 
spatial_points <- SpatialPoints(extent_sample, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"))

##Now determine if any of the points in presence/absence are at the same coordinates
butternut_diff <- gDifference(bg_proj, spatial_points)

##write out absence points 
write.csv(butternut_diff, "SDMs/InputFiles/Points/butternut_absence.csv")
write.csv(occurrence_no_auto, "SDMs/InputFiles/Points/butternut_presence.csv")

######################################################################
###################### Variable Selection ############################
######################################################################

##first need to combine presence and absence points into one document and add a column indicating presence of absence
##load presence
butternut_presence <- read.csv("SDMs/InputFiles/Points/butternut_presence.csv")
butternut_presence <- data.frame(butternut_presence)
butternut_presence$PA <- "1"
butternut_presence <- butternut_presence[,-1]
colnames(butternut_presence) <- c("Longitude", "Latitude", "PA")

##load absence 
butternut_absence <- read.csv("SDMs/InputFiles/Points/butternut_absence.csv")
butternut_absence <- data.frame(butternut_absence)
butternut_absence$PA <- "0"
butternut_absence <- butternut_absence[,-1]
colnames(butternut_absence) <- c("Longitude", "Latitude", "PA")

##now combine into one dataset
butternut_PA <- rbind(butternut_presence,butternut_absence)
write.csv(butternut_PA, "SDMs/InputFiles/Points/butternut_PA.csv")

##new df
butternut_PA_df <- butternut_PA

##now SP Transform
coordinates(butternut_PA) <- c('Longitude', 'Latitude')
proj4string(butternut_PA) <- CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")

##load variables
worldclim <- getData("worldclim",var="bio",res= 2.5)

##crop worldclim rasters
worldclim_crop <- crop(worldclim, extent_raster)

##project
worldclim_project <- projectRaster(worldclim_crop, crs = "+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")
names(worldclim_project) <- c("mat", "mdr", "iso", "temp_season", "mtwm", "mtcm", "range", "mtwetq", "mtdq", "mtwarq", "mtcq", "map", "pwm", "pdm", "precip_season", "pwetq", "pdq", "pwarq", "pcq")

##load in soil variables 
setwd("C:/Users/eschumacher/Documents/JUCI/soil2/NACP_MSTMIP_UNIFIED_NA_SOIL_MA_1242/data")

##load in soil layers
dom_soil <- raster("Unified_NA_Soil_Map_First_Dominant_Soil_Component_Area_Percentage.tif")
max_depth <- raster("Unified_NA_Soil_Map_Maximum_Soil_Depth.tif")
sub_cat <- raster("Unified_NA_Soil_Map_Subsoil_Cation_Exchange_Capacity.tif")
sub_clay <- raster("Unified_NA_Soil_Map_Subsoil_Clay_Fraction.tif")
sub_gravel <- raster("Unified_NA_Soil_Map_Subsoil_Gravel_Content.tif")
sub_oc <- raster("Unified_NA_Soil_Map_Subsoil_Organic_Carbon.tif")
sub_ph <- raster("Unified_NA_Soil_Map_Subsoil_pH.tif")
sub_bulk <- raster("Unified_NA_Soil_Map_Subsoil_Reference_Bulk_Density.tif")
sub_sand <- raster("Unified_NA_Soil_Map_Subsoil_Sand_Fraction.tif")
sub_silt <- raster("Unified_NA_Soil_Map_Subsoil_Silt_Fraction.tif")
top_cat <- raster("Unified_NA_Soil_Map_Topsoil_Cation_Exchange_Capacity.tif")
top_clay <- raster("Unified_NA_Soil_Map_Topsoil_Clay_Fraction.tif")
top_gravel <- raster("Unified_NA_Soil_Map_Topsoil_Gravel_Content.tif")
top_oc <- raster("Unified_NA_Soil_Map_Topsoil_Organic_Carbon.tif")
top_ph <- raster("Unified_NA_Soil_Map_Topsoil_pH.tif")
top_bulk <- raster("Unified_NA_Soil_Map_Topsoil_Reference_Bulk_Density.tif")
top_sand <- raster("Unified_NA_Soil_Map_Topsoil_Sand_Fraction.tif")
top_silt <- raster("Unified_NA_Soil_Map_Topsoil_Silt_Fraction.tif")

soil_stack <- stack(dom_soil, max_depth, sub_cat, sub_clay,
                    sub_gravel, sub_oc, sub_ph, sub_bulk, sub_sand, sub_silt, 
                    top_cat, top_clay, top_gravel, top_oc, top_ph, top_bulk, top_sand,
                    top_silt
)

##crop
soil_crop <- crop(soil_stack, extent_raster)
##project
soil_proj <- projectRaster(soil_crop, crs = "+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")

##elevation
setwd("C:/Users/eschumacher/Documents/Butternut")

##elevation
elevation <- raster("wc2.1_2.5m_elev.tif")

##crop to extent 
elevation_crop <- crop(elevation, extent_raster)
##project
elevation_proj <- projectRaster(elevation_crop, crs = "+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")
##calculate slope and aspect
slope_aspect <- slopeAspect(elevation_proj, out=c('slope', 'aspect'), unit='radians')

##now extract values
worldclim_extract <- extract(worldclim_project, butternut_PA)
soil_extract <- extract(soil_proj, butternut_PA)
slopeaspect_extract <- extract(slope_aspect, butternut_PA)
elevation_extract <- extract(elevation_proj, butternut_PA)

##bind into columns 
butternut_var <- cbind(butternut_PA_df, elevation_extract, slopeaspect_extract, worldclim_extract, soil_extract)
butternut_var <- na.omit(butternut_var)

##check out how many individuals are left 
length(butternut_var[butternut_var$PA == "1",]$PA) ##Presence points, 5386
length(butternut_var[butternut_var$PA == "0",]$PA) ##Absence points, 5062

##########creation correlation dissimilarity matrix

#correlation matrix
predictors_correlation <-cor(butternut_var[,4:43])

#correlation matrix as distance matrix - dissimilarity matrix
predictors_dist <- as.dist(abs(predictors_correlation))

#create dissimilarity tree 
predictor_cluster <- hclust(1-(predictors_dist))

#plot
par(mfrow=c(1,1))

setwd("G:/My Drive/Hoban_Lab_Docs/Projects/Butternut_JUCI/SDMs/InputFiles/VariableSelection")

pdf("cluster_ecogeo.pdf", width = 15, height = 10)
plot(as.dendrogram(predictor_cluster), horiz =T, main="Dissimilarity Cluster of Ecogeorgaphic Varibales", cex.main=0.8)
abline(v=0.5, col='red')
dev.off()

#Bisserial correlation

variable_names <- names(butternut_var[,1:43])

cor_result <- 43
butternut_col <- 2 

biserial_cor_matrix <- matrix(ncol=butternut_col, nrow=cor_result)

for (i in 4:43){
  
  biserial_cor_coef <- biserial.cor(butternut_var[,i],butternut_var$PA)
  
  biserial_cor_matrix[i,] <- rbind(variable_names[i], biserial_cor_coef)
  
}

##Biserial correlation 
biserial_cor_out <- data.frame(biserial_cor_matrix[-1:-3,])
colnames(biserial_cor_out) <- c("Variable", "Correlation Coef")

##write out data frame
write.csv(biserial_cor_out, "biserial_cor_matrix.csv")

######################################################################
####################### Running the Model ############################
######################################################################

##load in variable data frame
butternut_var <- read.csv("butternut_var.csv")
##now limit to important variables
butternut_list_variables <- c("PWM", "ISO", "Precip_Season", "Sub_Gravel")

##now load variables for model running
butternut_sel_var <- butternut_var[,butternut_list_variables]
butternut_sel_df <- cbind(butternut_var[,2:4], butternut_sel_var)

##now run models
par(mfrow=c(1,1))
set.seed(10)
butternut_samp <- sample(nrow(butternut_sel_df), round(0.70 * nrow(butternut_sel_df))) 
testdata <- na.omit(butternut_sel_df[butternut_samp,])
traindata <- na.omit(butternut_sel_df[-butternut_samp,])

mean_rep <- matrix(nrow = length(testdata$Longitude), ncol = 2)


#Model calibration. Using multiple BRT parameters to identify the best number of trees. See the Elith tutorial on what these parameters mean. 
###there's a bunch of other things but code line 384 is how you do the predictions and generate the map. Most of the other things in here 
####are either in the Elith tutorial or were related to finding range contraction and 
####expansion. 
bf=c(.7)
lr=c(.000007)
tc=c(2)
ss=c(25)
#Initiate the loop to identify the best number of trees. Call your model whatever you want- the "gbm.x = 4:7" are the columns of your climate variables and the "gbm.y=3" is the column on your csv file that has 0's and 1's for presence/absence 
for (i in 1:length(lr)){
  for (j in 1:length(bf)){
    for (k in 1:length(tc)){
      for(l in 1:length(ss)){
        
        
        ##Fit the gbm model
        #create a model name to store in the results table, I removed for (l in 1:length(ss)), ss[l],{ dist[t],'_'and 
        butternut_model_name <- paste('butternut_model_',tc[k],'_',lr[i],'_',bf[j],'_',ss[l],'_',sep='')
        
        set.seed(10)
        butternut_model <- gbm.step(traindata, gbm.x = 4:7, gbm.y = 3, family = "bernoulli", step.size = ss[l],tree.complexity = tc[k],learning.rate = lr[i], bag.fraction = bf[j])
        
        #Model internal metrics 
        cv.AUC = butternut_model$cv.statistics$discrimination.mean 
        cv.dev = butternut_model$cv.statistics$deviance.mean # average residual deviance over all folds during cross-validation 
        
        #Calculate the % of deviance explained. Deviance explained corresponds to the percentage of deviance for the null model explained by the fitted model (dev = 100% for a perfect model)
        #The function calc.deviance() in dismo package calculates the deviance between 2 vectors v 1 and v 2
        #calculating deviance explained by the model over the training dataset (int.dev)
        int.null.deviance = butternut_model$self.statistics$mean.null 
        int.residual.deviance = butternut_model$cv.statistics$deviance.mean 
        int.dev=(int.null.deviance-int.residual.deviance)/int.null.deviance
        pred.train = predict.gbm(butternut_model, traindata, n.trees = butternut_model$gbm.call$best.trees, type = "response") 
        train=calc.deviance(traindata$PA, pred.train)
        
        ##Model external metrics , calculated over an evaluation datasetevaluation.dfâ      
        pred_test = predict.gbm(butternut_model, testdata, n.trees = butternut_model$gbm.call$best.trees, type = "response") 
        d <- cbind(testdata$PA, pred_test) 
        pres <- d[d[,1]==1, 2]
        abs <- d[d[,1]==0, 2]
        eval <- evaluate(p=pres, a=abs)
        ext.AUC <- eval@auc
        
        #estimating the threshold to convert suitability values into binary maps (0/1)
        th<-eval@t[which.max(eval@TPR + eval@TNR)]
        
        independent=calc.deviance(testdata$PA, pred_test)  
        #residual deviance was calculated between observed presence/absence data (v 1) and predicted probability of presence (v 2 ),
        ext.residual.deviance = calc.deviance(testdata$PA, pred_test, calc.mean=T)
        mean_rep[,1] <- mean(testdata$PA)
        ext.null.deviance = calc.deviance(testdata$PA, mean_rep[,1], calc.mean=T) 
        #Calculating deviance explained in the evaluation dataset. Portion of data withheld during model building
        ext.dev=(ext.null.deviance - ext.residual.deviance)/ext.null.deviance
        
        
        df<-rbind(df, data.frame(butternut_model_name,tc[k],lr[i],bf[j],ss[l],butternut_model$gbm.call$best.trees,cv.AUC,ext.AUC,int.dev,ext.dev,train,independent,ext.residual.deviance))
        
      }
    }
  }
}
th

##summarize model - percent contribution of each variable
summary(butternut_model)

###
butternut_predictors<-c("Mean Temperature of the Driest Quarter (C)", "Precipitation of the Wettest Quarter (mm)", "Mean Annual Precipitation (mm)", "Topsoil Bulk Density", "Topsoil Clay Fraction", "Mean Diurnal Range (C)")
butternut_predictors<-factor(butternut_predictors,levels=c("Mean Temperature of the Driest Quarter (C)", "Precipitation of the Wettest Quarter (mm)", "Mean Annual Precipitation (mm)", "Topsoil Bulk Density","Topsoil Clay Fraction", "Mean Diurnal Range (C)"))
butternut_influences<-data.frame(butternut_predictors,percentages=c(22.2, 20.8, 16.2, 16.0, 15.7, 9.11))
                                 
butternut_contribution_bp <- ggplot(data=butternut_influences, aes(x=butternut_predictors, y=percentages)) +
  geom_bar(stat="identity", color="black", fill="dodgerblue",width=.4)+
  geom_text(aes(y=percentages, label=paste0(percentages, '%')), vjust=.5, hjust=-.1,size=3)+
  theme_minimal()+ggtitle("Relative Influence of Predictors (CV AUC = 0.762)")+theme_light(base_size=14)+theme(plot.margin = unit(c(1,1,1,1), "cm"))+ylim(0,100)+
  xlab("Predictors") + ylab("Percent Contribution to the Model")

butternut_contribution_bp <- butternut_contribution_bp + coord_flip()

pdf("SDMs/InputFiles/ModelRunning/butternut_contribution_6var_slowlr.pdf", width = 10, height = 8)
butternut_contribution_bp
dev.off()  

##plot data frame of reduced variable selection 

###
butternut_predictors<-c("Mean Diurnal Range","Precipitation of the Wettest Quarter","Mean Temperature of the Driest Quarter","Mean Annual Precipitation","Topsoil Clay Fraction","Subsoil Bulk Density","Slope","Subsoil Silt Fraction")
butternut_predictors<-factor(butternut_predictors,levels=c("Mean Diurnal Range","Precipitation of the Wettest Quarter","Mean Temperature of the Driest Quarter","Mean Annual Precipitation","Topsoil Clay Fraction","Subsoil Bulk Density","Slope","Subsoil Silt Fraction"))
butternut_influences<-data.frame(butternut_predictors,percentages=c(47.1, 19.8, 15.0, 5.69, 5.25, 2.49, 2.35, 2.33))

butternut_contribution_bp <- ggplot(data=butternut_influences, aes(x=butternut_predictors, y=percentages)) +
  geom_bar(stat="identity", color="black", fill="dodgerblue",width=.4)+
  geom_text(aes(y=percentages, label=paste0(percentages, '%')), vjust=.5, hjust=-.1,size=3)+
  theme_minimal()+ggtitle("Relative Influence of Predictors (CV AUC = 0.799)")+theme_light(base_size=14)+theme(plot.margin = unit(c(1,1,1,1), "cm"))+ylim(0,100)+
  xlab("Predictors") + ylab("Percent Contribution to the Model")

butternut_contribution_bp <- butternut_contribution_bp + coord_flip()

pdf("InputFiles/ModelRunning/reduced_lr_contribution_bp.pdf", width = 10, height = 8)
butternut_contribution_bp
dev.off()  


#######################
#### Prediction map ###
#######################

##need to stack all the variables that contribute to the best model
##
butternut_stack <- arc.open("C:/Users/eschumacher/Documents/ArcGIS/Projects/butternutSDM/butternut_output.gdb/composite_output2")
butternut_stack_arc <- arc.raster(butternut_stack)
butternut_stack_r <- as.raster(butternut_stack_arc)

##
butternut_ecogeo_names <- c("MAT","MDR","ISO","temp_season","MTWM","MTCM","TAR","MTwetQ","MTDQ","MTwarQ","MTCQ","MAP","PWM","PDM","precip_season","PwetQ","PDQ","PwarQ","PCQ", "top_clay","top_bulk","top_silt")
names(butternut_stack_r) <- butternut_ecogeo_names

##
butternut_reduced_stack <- stack(butternut_stack_r$MDR, butternut_stack_r$MTDQ, butternut_stack_r$MAP, butternut_stack_r$PwetQ, butternut_stack_r$top_silt, butternut_stack_r$top_bulk, butternut_stack_r$top_clay)
plot(butternut_reduced_stack)

###prediction map
butternut_model$var.names <- names(butternut_reduced_stack)
butternut_prediction_map <- predict(object=butternut_reduced_stack, model=butternut_model,n.trees=3075, type='response')
plot(butternut_prediction_map)
butternut_prediction_map_scaled <- butternut_prediction_map * 1.9
par(mfrow=c(1,1))
butternut_prediction_map_prob = (exp(butternut_prediction_map_scaled) / (1+ exp(butternut_prediction_map_scaled)))
butternut_prediction_map_prob=(exp(butternut_prediction_map)/(1+exp(butternut_prediction_map)))

####plot presence absence
butternut_points <- data.frame(butternut_sel_var[,2:4])





